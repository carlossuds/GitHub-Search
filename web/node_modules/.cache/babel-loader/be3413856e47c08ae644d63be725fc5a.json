{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Suds\\\\Documents\\\\GitHub\\\\desafio_concrete\\\\web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Suds\\\\Documents\\\\GitHub\\\\desafio_concrete\\\\web\\\\src\\\\pages\\\\NotFound\\\\index.js\";\nimport React, { useState, useEffect } from 'react';\nimport { MdSearch } from 'react-icons/md';\nimport api from '../../services/api';\nimport history from '../../services/history';\nimport { Container, Head, Text1, Text2, Input, Button } from './styles';\nexport default function NotFound({\n  location\n}) {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        user = _useState2[0],\n        setUser = _useState2[1];\n\n  const _useState3 = useState([]),\n        _useState4 = _slicedToArray(_useState3, 2),\n        repos = _useState4[0],\n        setRepos = _useState4[1];\n\n  const _useState5 = useState(0),\n        _useState6 = _slicedToArray(_useState5, 2),\n        stars = _useState6[0],\n        setStars = _useState6[1];\n\n  useEffect(() => {\n    setRepos(location.state.repos);\n    let count = 0;\n    repos.map(repo => {\n      count += repo.stargazers_count;\n    });\n    setStars(count);\n    setUser(location.state.user.login);\n  }, [location.state.repos, location.state.user.login, repos]);\n\n  async function handleClick() {\n    try {\n      const responseUser = await api.get(`/users/${user}`);\n      const responseRepos = await api.get(`/users/${user}/repos`);\n      history.push({\n        pathname: '/result',\n        state: {\n          user: responseUser.data,\n          repos: responseRepos.data\n        } // your data array of objects\n\n      });\n    } catch (err) {\n      setUser('');\n      console.log(err);\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Head, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Link, {\n    style: {\n      textDecoration: 'none',\n      color: 'black'\n    },\n    to: \"/\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(Text1, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Github\"), React.createElement(Text2, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"Search\")), React.createElement(Input, {\n    type: \"text\",\n    value: user,\n    onChange: e => setUser(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(MdSearch, {\n    color: \"white\",\n    size: 30,\n    style: {\n      marginTop: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }))), React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["C:/Users/Suds/Documents/GitHub/desafio_concrete/web/src/pages/NotFound/index.js"],"names":["React","useState","useEffect","MdSearch","api","history","Container","Head","Text1","Text2","Input","Button","NotFound","location","user","setUser","repos","setRepos","stars","setStars","state","count","map","repo","stargazers_count","login","handleClick","responseUser","get","responseRepos","push","pathname","data","err","console","log","textDecoration","color","e","target","value","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport { MdSearch } from 'react-icons/md';\nimport api from '../../services/api';\nimport history from '../../services/history';\n\nimport { Container, Head, Text1, Text2, Input, Button } from './styles';\n\nexport default function NotFound({ location }) {\n  const [user, setUser] = useState('');\n  const [repos, setRepos] = useState([]);\n  const [stars, setStars] = useState(0);\n\n  useEffect(() => {\n    setRepos(location.state.repos);\n    let count = 0;\n    repos.map(repo => {\n      count += repo.stargazers_count;\n    });\n    setStars(count);\n    setUser(location.state.user.login);\n  }, [location.state.repos, location.state.user.login, repos]);\n\n  async function handleClick() {\n    try {\n      const responseUser = await api.get(`/users/${user}`);\n\n      const responseRepos = await api.get(`/users/${user}/repos`);\n\n      history.push({\n        pathname: '/result',\n        state: {\n          user: responseUser.data,\n          repos: responseRepos.data,\n        }, // your data array of objects\n      });\n    } catch (err) {\n      setUser('');\n      console.log(err);\n    }\n  }\n\n  return (\n    <>\n      <Head>\n        <Link style={{ textDecoration: 'none', color: 'black' }} to=\"/\">\n          <Text1>Github</Text1>\n          <Text2>Search</Text2>\n        </Link>\n\n        <Input\n          type=\"text\"\n          value={user}\n          onChange={e => setUser(e.target.value)}\n        />\n        <Button onClick={handleClick}>\n          <MdSearch color=\"white\" size={30} style={{ marginTop: 5 }} />\n        </Button>\n      </Head>\n      <Container />\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}